CREATE OR REPLACE TRIGGER CONTROLSUELDO 
BEFORE INSERT OR UPDATE ON EMPLOYEES 
FOR EACH ROW 
BEGIN
  IF :new.salary > 5000 and :new.job_id != 'AD_PRES' then
  RAISE_APPLICATION_ERROR(-20000,'no puedes ganar tanto');
  END IF;
END;
--EJEMPLO1
create or replace TRIGGER EJERTRI1
BEFORE INSERT OR DELETE ON EMPLOYEES2
FOR EACH ROW
BEGIN
  IF DELETING THEN
  INSERT INTO HR.AUDITA_EMP (USUARIO,MOMENTO,COD_EMP,OPERACIÓN,DESCRIPCIÓN) VALUES
  (USER, sysdate, :old.employee_id, 'BORRADO', '');
  ELSIF INSERTING THEN
  INSERT INTO HR.AUDITA_EMP (USUARIO,MOMENTO,COD_EMP,OPERACIÓN,DESCRIPCIÓN) VALUES
  (USER, sysdate, :new.employee_id, 'INSERTAR', '');
  END IF;
END;
--EJEMPLO2
create or replace TRIGGER EJERTRI2 
AFTER UPDATE ON EMPLOYEES2 
FOR EACH ROW
BEGIN
    IF UPDATING AND :OLD.SALARY = :NEW.SALARY THEN
    INSERT INTO HR.AUDITA_EMP (USUARIO, MOMENTO, COD_EMP, OPERACIÓN, DESCRIPCIÓN)
    VALUES (USER, sysdate, :old.employee_id, 'Modificado', '');
    ELSIF UPDATING AND  :OLD.SALARY <> :NEW.SALARY THEN
    INSERT INTO HR.AUDITA_EMP
    VALUES( USER, SYSDATE, :OLD.EMPLOYEE_ID, 'MODIFICACIÓN', 'CAMBIO DE SUELDO DE'
    ||:OLD.SALARY||' POR '||:NEW.SALARY);
    END IF;

END;
--EJEMPLO3
create or replace TRIGGER EJERTRI3 
AFTER LOGON ON SCHEMA 
BEGIN
 INSERT INTO HR.AUDITA_EMP (USUARIO, MOMENTO,COD_EMP, OPERACIÓN, DESCRIPCIÓN)
    VALUES (USER, sysdate, '', 'INICIO DE SESIÓN', '');
END;
--EJEMPLO4
create or replace TRIGGER EJERTRI4 
BEFORE LOGOFF ON SCHEMA 
BEGIN
 INSERT INTO HR.AUDITA_EMP (USUARIO, MOMENTO,COD_EMP, OPERACIÓN, DESCRIPCIÓN)
    VALUES (USER, sysdate, '', 'CIERRE DE SESIÓN', '');
END;
--EJEMPLO5
create or replace TRIGGER EJERTRI5
BEFORE DELETE ON employees2 
FOR EACH ROW
DECLARE
  PRESIDENTE EXCEPTION;
BEGIN
    IF DELETING AND :OLD.JOB_ID ='AD_PRES' THEN
    RAISE PRESIDENTE;
    END IF;
    EXCEPTION 
    WHEN PRESIDENTE THEN
    RAISE_APPLICATION_ERROR(-20101, 'NO SE PUEDE BORRAR ESE USUARIO.');
END;
--EJEMPLO6
CREATE OR REPLACE TRIGGER EJERTRI6 
BEFORE UPDATE ON EMPLOYEES2
FOR EACH ROW
DECLARE
    NOACTUALIZADO EXCEPTION;
    V_CAMPO DEPARTMENTS.MANAGER_ID%TYPE;
BEGIN
  SELECT MANAGER_ID INTO V_CAMPO FROM DEPARTMENTS WHERE DEPARTMENT_ID = :NEW.DEPARTMENT_ID;
  IF V_CAMPO IS NOT NULL THEN
  RAISE_APPLICATION_ERROR(-20201, 'NOT NULL.'||V_CAMPO);
  ELSE
  RAISE NOACTUALIZADO;
  END IF;
  EXCEPTION
  WHEN NOACTUALIZADO THEN
  RAISE_APPLICATION_ERROR(-20201, 'NO PUEDES MODIFICAR UN MIEMBRO SIN UN JEFE ASIGNADO.');
  
END;
--EJEMPLO 7
CREATE OR REPLACE TRIGGER EJERTRI7 
BEFORE UPDATE OR INSERT ON EMPLOYEES2
FOR EACH ROW
DECLARE
 SUELDOMENOR JOBS.MAX_SALARY%TYPE;
 SUELDOMAYOR JOBS.MAX_SALARY%TYPE;
 SALARIO EXCEPTION;
BEGIN
  SELECT MAX_SALARY INTO SUELDOMAYOR FROM JOBS WHERE JOB_ID= :NEW.JOB_ID;
  SELECT MIN_SALARY INTO SUELDOMENOR FROM JOBS WHERE JOB_ID= :NEW.JOB_ID;
  IF UPDATING OR INSERTING AND :NEW.SALARY < SUELDOMENOR AND :NEW.SALARY > SUELDOMAYOR THEN
  RAISE SALARIO;
  END IF;
  EXCEPTION
  WHEN SALARIO THEN
  RAISE_APPLICATION_ERROR(-20301, 'NO SE PERMITE INGRESAR ESTE TIPO DE SUELDO.');
  
END;